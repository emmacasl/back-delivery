name: Django CI/CD

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt


  sonarqube:
    name: SonarQube Integration
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v3.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} //Sonar Token generated
      with:
        projectKey: "emmacasl_back-delivery"
        organization: "emmacasl"
      


  # docker:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4.1.7

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Azure Container Registry
  #       uses: azure/docker-login@v2
  #       with:
  #         login-server: ${{ secrets.AZURE_DOCKER }}
  #         username: ${{ secrets.AZURE_CLIENT_ID }}
  #         password: ${{ secrets.AZURE_CLIENT_SECRET }}

  #     - name: Build and Push Docker Image
  #       run: |
  #         docker buildx create --use
  #         docker buildx build --platform linux/amd64 \
  #           --build-arg DB_NAME=${{ secrets.DB_NAME }} \
  #           --build-arg DB_USER=${{ secrets.DB_USER }} \
  #           --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
  #           --build-arg DB_HOST=${{ secrets.DB_HOST }} \
  #           --build-arg DB_PORT=${{ secrets.DB_PORT }} \
  #           -t ${{ secrets.AZURE_DOCKER }}/back-delivery:${{ github.sha }} --push .


  # deploy:
  #   needs: docker
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Log in to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #     - name: 'Deploy to Azure Container Instances'
  #       uses: 'azure/aci-deploy@v1'
  #       with:
  #         resource-group: ${{ secrets.RESOURCE_GROUP }}
  #         dns-name-label: ${{ secrets.RESOURCE_GROUP }}
  #         image: ${{ secrets.AZURE_DOCKER }}/back-delivery:${{ github.sha }}
  #         registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  #         registry-username: ${{ secrets.AZURE_CLIENT_ID }}
  #         registry-password: ${{ secrets.AZURE_CLIENT_SECRET }}
  #         name: back-delivery
  #         location: 'East US'
  #         ports: |
  #           80
  #         cpu: 4
  #         memory: 6

